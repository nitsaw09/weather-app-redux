{"version":3,"sources":["reducers/fetch-weather.tsx","reducers/fetch-location.tsx","reducers/reducers.tsx","store/store.tsx","actions/fetch-weather-data.tsx","components/Weather.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["fetchWeatherData","state","weatherData","action","type","console","log","payload","fetchLocation","location","FetchWeather","reducers","combineReducers","FetchWeatherReducer","FetchLocationReducer","FetchLocation","middleware","applyMiddleware","logger","thunk","Store","createStore","Reducers","fetchAPIResponse","city","dispatch","axios","get","then","response","arr1","key1","data","push","arr2","key2","current","splice","catch","err","Main","componentWillMount","props","FetchAPIResponse","search","value","changeHandler","e","target","setState","className","onChange","this","bind","onClick","apiLocation","src","apiResponse","alt","Component","connect","bindActionCreators","App","store","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gSAmBeA,EAlBU,WAOnB,IALJC,EAKG,uDALK,CACNC,YAAa,IAGfC,EACG,uCAQH,MANoB,uBAAhBA,EAAOC,OAETC,QAAQC,IAAIH,EAAOI,SACnBN,EAAK,eAAQA,EAAR,CAAeC,YAAaC,EAAOI,WAGnCN,GCJMO,EAZO,WAKhB,IAJJP,EAIG,uDAJK,CACNQ,SAAU,IAEZN,EACG,uCAIH,MAHoB,wBAAhBA,EAAOC,OACTH,EAAK,eAAQA,EAAR,CAAeQ,SAAUN,EAAOI,WAEhCN,GCFTI,QAAQC,IAAII,GACZ,IAKeC,EALEC,YAAgB,CAC/BC,oBAAqBH,EACrBI,qBAAsBC,ICHlBC,EAAaC,YAAgBC,IAAQC,KAK5BC,EAFDC,YAAYC,EAAUN,G,yDCR7B,SAASO,EAAiBC,GAC/B,OAAO,SAASC,GAEdC,IACGC,IACC,gBAAkBH,GAEnBI,MAAK,SAAAC,GACJ,IAAIC,EAAO,GACX,IAAK,IAAIC,KAAQF,EAASG,KAAKvB,SAC7BqB,EAAKG,KAAKJ,EAASG,KAAKvB,SAASsB,IAInCN,EAAS,CAAErB,KAAM,sBAAuBG,QAASuB,IAGjD,IAAII,EAAO,GAEX,IAAK,IAAIC,KADT9B,QAAQC,IAAIuB,EAASG,MACJH,EAASG,KAAKI,QAC7BF,EAAKD,KAAKJ,EAASG,KAAKI,QAAQD,IAGlCD,EAAKG,OAAO,EAAG,GAIfZ,EAAS,CAAErB,KAAM,qBAAsBG,QAAS2B,OAEjDI,OAAM,SAAAC,GAAG,OAAIlC,QAAQC,IAAIiC,O,ICX1BC,E,2MAEJC,mBAAqB,WAEnB,EAAKC,MAAMC,iBAAiB,a,EAI9BC,OAAS,WAEP,EAAKF,MAAMC,iBAAiB,EAAK1C,MAAM4C,Q,EAGzCC,cAAgB,SAACC,GAEf,IAAIF,EAAQE,EAAEC,OAAOH,MAErB,EAAKI,SAAS,CACZJ,MAAOA,K,wEAKT,OACE,yBAAKK,UAAU,qCACb,yBAAKA,UAAU,sBAAf,eACA,yBAAKA,UAAU,yDACb,4BACEA,UAAU,wBACVC,SAAUC,KAAKN,cAAcO,KAAKD,OAElC,4BAAQP,MAAM,YAAd,YACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,cAAd,eAEF,yBAAKK,UAAU,sBACb,4BACEA,UAAU,eACV9C,KAAK,SACLkD,QAASF,KAAKR,QAHhB,aASJ,yBAAKM,UAAU,8BACb,6BACE,yBAAKA,UAAU,UACb,uBAAGA,UAAU,iBACVE,KAAKV,MAAMa,YAAY,GAD1B,KACgCH,KAAKV,MAAMa,YAAY,IAEvD,yBACEL,UAAU,0BACVM,IAAKJ,KAAKV,MAAMe,YAAY,GAC5BC,IAAI,cAEN,uBAAGR,UAAU,sBAAsBE,KAAKV,MAAMe,YAAY,IAC1D,uBAAGP,UAAU,iBACqB,QAA/BE,KAAKV,MAAMe,YAAY,IAAgB,MAAQ,QAAS,IACxDL,KAAKV,MAAMe,YAAY,KAG5B,yBAAKP,UAAU,qDACb,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,MAAf,WACA,yBAAKA,UAAU,YACf,yBAAKA,UAAU,gBACZE,KAAKV,MAAMe,YAAY,GAD1B,YAKJ,yBAAKP,UAAU,sBACb,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,MAAf,cACA,yBAAKA,UAAU,YACf,yBAAKA,UAAU,gBACZE,KAAKV,MAAMe,YAAY,IAD1B,YAKJ,yBAAKP,UAAU,sBACb,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,MAAf,YACA,yBAAKA,UAAU,YACf,yBAAKA,UAAU,gBACZE,KAAKV,MAAMe,YAAY,GAD1B,gB,GArFCE,aAuHJC,mBArBf,SAAyB3D,GAOvB,MAAO,CACLwD,YAAaxD,EAAMY,oBAAoBX,YACvCqD,YAAatD,EAAMa,qBAAqBL,aAK5C,SAA8BgB,GAE5B,OAAOoC,YAAmB,CAAElB,iBAAkBpB,GAAoBE,KAKrDmC,CAA+CpB,G,MC1H/CsB,MAVf,WACE,OACE,kBAAC,IAAD,CAAUC,MAAO3C,GACf,yBAAK8B,UAAU,wBACb,kBAAC,EAAD,SCCYc,QACW,cAA7BC,OAAOxD,SAASyD,UAEe,UAA7BD,OAAOxD,SAASyD,UAEhBD,OAAOxD,SAASyD,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdtC,OAAM,SAAAuC,GACLxE,QAAQwE,MAAMA,EAAMC,c","file":"static/js/main.9b9d2d80.chunk.js","sourcesContent":["// this function gets an initial state\nconst fetchWeatherData = (\n  // initial state\n  state = {\n    weatherData: [] // which is set to an empty array\n  },\n  // then we have an action\n  action: { type: string; payload: any; }\n) => {\n  // get the action type FETCH_WEATHER_DATA\n  if (action.type === \"FETCH_WEATHER_DATA\") {\n    // here we add a payload to an existing state\n    console.log(action.payload);\n    state = { ...state, weatherData: action.payload };\n  }\n  // here return the object, the state\n  return state;\n};\n\nexport default fetchWeatherData;","const fetchLocation = (\n  state = {\n    location: []\n  },\n  action: { type: string; payload: any }\n) => {\n  if (action.type === \"FETCH_LOCATION_DATA\") {\n    state = { ...state, location: action.payload };\n  }\n  return state;\n};\n\nexport default fetchLocation;\n","import { combineReducers } from \"redux\";\n\n// import the reducers to use\nimport FetchWeather from \"./fetch-weather\";\nimport FetchLocation from \"./fetch-location\";\n\n// combine reducers\nconsole.log(FetchWeather);\nconst reducers = combineReducers({\n  FetchWeatherReducer: FetchWeather,\n  FetchLocationReducer: FetchLocation\n});\n\nexport default reducers;\n","import logger from \"redux-logger\"; //allows you to see the state of the app\nimport thunk from \"redux-thunk\"; // allows return a function instead of an action\nimport { applyMiddleware, createStore } from \"redux\";\n\nimport Reducers from \"../reducers/reducers\";\n\n//--- MIDDLEWARE\nconst middleware = applyMiddleware(logger, thunk);\n\n//--- STORE\nconst Store = createStore(Reducers, middleware);\n\nexport default Store;\n","import axios from \"axios\";\n\nexport function fetchAPIResponse(city: string) {\n  return function(dispatch: (arg0: { type: string; payload: any[] }) => void) {\n    // make the axios call for the API\n    axios\n      .get(\n        \"weather?city=\" + city\n      )\n      .then(response => {\n        let arr1 = [];\n        for (var key1 in response.data.location) {\n          arr1.push(response.data.location[key1]);\n        }\n        //--- DISPATCH THE ACTION\n        // dispatch the FETCH_LOCATION_DATA action\n        dispatch({ type: \"FETCH_LOCATION_DATA\", payload: arr1 });\n\n        // due the structure of the API response\n        let arr2 = [];\n        console.log(response.data);\n        for (var key2 in response.data.current) {\n          arr2.push(response.data.current[key2]);\n        }\n        // splice (remove) it from the array\n        arr2.splice(5, 1);\n\n        // --- DISPATCH THE ACTION\n        // dispatch the FETCH_WEATHER_DATA action\n        dispatch({ type: \"FETCH_WEATHER_DATA\", payload: arr2 });\n      })\n      .catch(err => console.log(err));\n  };\n}\n","import React, { Component } from \"react\";\n\n// import the connect and bindActionsCreators functions\n// in order to connect the component to the state in Redux\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\n// import the action\nimport { fetchAPIResponse } from \"../actions/fetch-weather-data\";\n\ninterface Props {\n  FetchAPIResponse: any;\n  apiResponse: any;\n  apiLocation: any;\n}\n\ninterface State {\n  value: String;\n}\n\nclass Main extends Component<Props, State> {\n  // call the action\n  componentWillMount = () => {\n    // before mounting\n    this.props.FetchAPIResponse(\"New York\");\n  };\n\n  // this is the function to search for the city added\n  search = () => {\n    // in this case I am using state just for this component\n    this.props.FetchAPIResponse(this.state.value);\n  };\n\n  changeHandler = (e: { target: { value: any } }) => {\n    // get the value from the input\n    let value = e.target.value;\n    // store the value in the state property\n    this.setState({\n      value: value\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"row d-flex justify-content-center\">\n        <div className=\"h1 text-white mb-3\">Weather App</div>\n        <div className=\"input-group col-12 mb-3 d-flex justify-content-center\">\n          <select\n            className=\"form-control col-md-4\"\n            onChange={this.changeHandler.bind(this)}\n          >\n            <option value=\"New York\">New York</option>\n            <option value=\"New Jersey\">New Jersey</option>\n            <option value=\"California\">California</option>\n          </select>\n          <div className=\"input-group-append\">\n            <button\n              className=\"btn btn-info\"\n              type=\"button\"\n              onClick={this.search}\n            >\n              Weather\n            </button>\n          </div>\n        </div>\n        <div className=\"container text-center mt-3\">\n          <div>\n            <div className=\"col-12\">\n              <p className=\"h3 text-white\">\n                {this.props.apiLocation[0]}, {this.props.apiLocation[1]}\n              </p>\n              <img\n                className=\"img-thumbnail cloud-img\"\n                src={this.props.apiResponse[3]}\n                alt=\"cloud-img\"\n              ></img>\n              <p className=\"mt-2 text-white h5\">{this.props.apiResponse[4]}</p>\n              <p className=\"text-white h6\">\n                {this.props.apiResponse[14] === \"yes\" ? \"Day\" : \"Night\"}{\" \"}\n                {this.props.apiResponse[0]}\n              </p>\n            </div>\n            <div className=\"row mt-4 d-flex justify-content-center text-white\">\n              <div className=\"col-md-2 col-xs-12\">\n                <div className=\"bg-cadetblue p-1 mb-3\">\n                  <div className=\"h5\">Celsius</div>\n                  <div className=\"divider\"></div>\n                  <div className=\"mt-3 mb-4 h4\">\n                    {this.props.apiResponse[1]} °C\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-md-2 col-xs-12\">\n                <div className=\"bg-cadetblue p-1 mb-3\">\n                  <div className=\"h5\">Fahrenheit</div>\n                  <div className=\"divider\"></div>\n                  <div className=\"mt-3 mb-4 h4\">\n                    {this.props.apiResponse[11]} °F\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-md-2 col-xs-12\">\n                <div className=\"bg-cadetblue p-1 mb-3\">\n                  <div className=\"h5\">Humidity</div>\n                  <div className=\"divider\"></div>\n                  <div className=\"mt-3 mb-4 h4\">\n                    {this.props.apiResponse[9]} %\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: {\n  FetchWeatherReducer: { weatherData: any };\n  FetchLocationReducer: { location: any };\n}) {\n  // allows us to get the data from the store\n  // using props\n  // state.ReducerName.reducerProperty\n  return {\n    apiResponse: state.FetchWeatherReducer.weatherData,\n    apiLocation: state.FetchLocationReducer.location\n  };\n}\n\n// remember that to call this property using \"props.FetchAPIResponse\"\nfunction matchDispatchToProps(dispatch: any) {\n  // bind the action to be executed\n  return bindActionCreators({ FetchAPIResponse: fetchAPIResponse }, dispatch);\n}\n\n// export the component using the connect from Redux\n// pass the functions that connect the props and the actions\nexport default connect(mapStateToProps, matchDispatchToProps)(Main); // the name of the component\n","import React from \"react\";\nimport \"./App.css\";\nimport { Provider } from \"react-redux\";\nimport Store from \"./store/store\";\nimport Main from \"./components/Weather.component\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <Provider store={Store}>\n      <div className=\"container-fluid mt-4\">\n        <Main />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}